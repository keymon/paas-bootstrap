---
resource_types:
- name: s3-iam
  type: docker-image
  source:
    repository: governmentpaas/s3-resource

- name: semver-iam
  type: docker-image
  source:
    repository: governmentpaas/semver-resource

resources:
  - name: paas-bootstrap
    type: git
    source:
      uri: https://github.com/keymon/paas-bootstrap.git
      branch: {{branch_name}}

  - name: bucket-terraform-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bucket.tfstate

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: vpc.tfstate

  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      key: destroy-trigger

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh.tfstate

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-secrets.yml

  - name: bosh-init-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: {{bosh_manifest_state}}

  - name: bosh-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-manifest.yml

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse.tfstate
      region_name: {{aws_region}}

  - name: concourse-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: concourse-manifest.yml

jobs:
  - name: enable-bosh-access
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
        - get: vpc-tfstate
        - get: bosh-tfstate

      - task: vpc-terraform-outputs-to-sh
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: "2.2-slim"
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          outputs:
          - name: vpc-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate \
              > vpc-terraform-outputs/tfvars.sh
              ls -l vpc-terraform-outputs/tfvars.sh

      - task: add-vagrant-IP-to-BOSH-SG
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
          inputs:
            - name: paas-bootstrap
            - name: vpc-terraform-outputs
            - name: bosh-tfstate
          outputs:
            - name: updated-bosh-tfstate
          params:
            TF_VAR_env: {{deploy_env}}
            TF_VAR_system_dns_zone_name: {{system_dns_zone_name}}
            TF_VAR_bosh_fqdn: {{bosh_fqdn}}
            TF_VAR_bosh_fqdn_external: {{bosh_fqdn_external}}
            AWS_DEFAULT_REGION: {{aws_region}}
            VAGRANT_IP: {{vagrant_ip}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              export TF_VAR_secrets_bosh_postgres_password=""
              export TF_VAR_bosh_az=""
              terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
              terraform apply ${terraform_params} -target=aws_security_group.bosh \
                -state=bosh-tfstate/bosh.tfstate -state-out=updated-bosh-tfstate/bosh.tfstate \
                -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars paas-bootstrap/terraform/bosh
        ensure:
          put: bosh-tfstate
          params:
            file: updated-bosh-tfstate/bosh.tfstate

      - put: pipeline-trigger
        params: {bump: patch}

  - name: destroy-concourse
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['enable-bosh-access']
        - get: pipeline-trigger
          passed: ['enable-bosh-access']
          trigger: true
        - get: bosh-secrets
        - get: vpc-tfstate
        - get: concourse-tfstate
        - get: concourse-manifest

      - task: destroy-concourse
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli
          inputs:
          - name: paas-bootstrap
          - name: bosh-secrets
          - name: concourse-manifest
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-bootstrap/concourse/scripts/bosh_login.sh {{bosh_fqdn_external}} bosh-secrets/bosh-secrets.yml
              DEPLOYMENT_NAME=$(./paas-bootstrap/concourse/scripts/val_from_yaml.rb name concourse-manifest/concourse-manifest.yml)
              bosh -n delete deployment --force "$DEPLOYMENT_NAME"

      - task: vpc-terraform-outputs-to-sh
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: "2.2-slim"
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          outputs:
          - name: vpc-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate \
              > vpc-terraform-outputs/tfvars.sh
              ls -l vpc-terraform-outputs/tfvars.sh

      - task: destroy-concourse-terraform
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
          inputs:
            - name: paas-bootstrap
            - name: vpc-terraform-outputs
            - name: concourse-tfstate
          outputs:
            - name: updated-concourse-tfstate
          params:
            AWS_DEFAULT_REGION: {{aws_region}}
            TF_VAR_env: {{deploy_env}}
            TF_VAR_concourse_hostname: {{concourse_hostname}}
            TF_VAR_system_dns_zone_name: {{system_dns_zone_name}}
            TF_VAR_git_rsa_id_pub: anything
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              touch concourse.crt concourse.key paas-bootstrap/terraform/concourse/concourse_id_rsa.pub
              terraform destroy -force \
                -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                -state=concourse-tfstate/concourse.tfstate -state-out=updated-concourse-tfstate/concourse.tfstate \
                paas-bootstrap/terraform/concourse
        ensure:
          put: concourse-tfstate
          params:
            file: updated-concourse-tfstate/concourse.tfstate

  - name: destroy-bosh
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          trigger: true
          passed: ['destroy-concourse']
        - get: paas-bootstrap
        - get: bosh-secrets
        - get: bosh-init-state
        - get: bosh-manifest
        - get: vpc-tfstate
        - get: bosh-tfstate

      - task: check-existing-deployments
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli
          inputs:
            - name: paas-bootstrap
            - name: bosh-secrets
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-bootstrap/concourse/scripts/bosh_login.sh {{bosh_fqdn_external}} bosh-secrets/bosh-secrets.yml
                ./paas-bootstrap/concourse/scripts/bosh_pre_destroy.rb

      - task: cleanup-orphaned-disks
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli
          inputs:
            - name: paas-bootstrap
            - name: bosh-secrets
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-bootstrap/concourse/scripts/bosh_login.sh {{bosh_fqdn_external}} bosh-secrets/bosh-secrets.yml
                bosh cleanup --all

      - task: destroy-bosh-instance
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-init
          inputs:
            - name: paas-bootstrap
            - name: bosh-manifest
            - name: bosh-init-state
          params:
            BOSH_MANIFEST_STATE: {{bosh_manifest_state}}
          outputs:
            - name: bosh-init-working-dir
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                cp bosh-manifest/bosh-manifest.yml bosh-init-working-dir/bosh-manifest.yml
                cp bosh-init-state/"${BOSH_MANIFEST_STATE}" bosh-init-working-dir/bosh-manifest-state.json
                bosh-init delete bosh-init-working-dir/bosh-manifest.yml
                # If the delete is successful, the file will be missing
                if [ ! -f bosh-init-working-dir/bosh-manifest-state.json ]; then
                  cp paas-bootstrap/concourse/init_files/bosh-init-state.json.tpl bosh-init-working-dir/bosh-manifest-state.json
                fi
        ensure:
          put: bosh-init-state
          params:
            file: "bosh-init-working-dir/bosh-manifest-state.json"

      - task: extract-terraform-variables
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ruby
              tag: "2.2-slim"
          inputs:
            - name: paas-bootstrap
            - name: vpc-tfstate
            - name: bosh-secrets
          outputs:
            - name: terraform-variables
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < vpc-tfstate/vpc.tfstate > terraform-variables/vpc.tfvars.sh
                ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_yaml.rb \
                < bosh-secrets/bosh-secrets.yml > terraform-variables/bosh-secrets.tfvars.sh

      - task: destroy-terraform
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
          inputs:
            - name: paas-bootstrap
            - name: terraform-variables
            - name: bosh-tfstate
          outputs:
            - name: updated-bosh-tfstate
          params:
            DEPLOY_ENV: {{deploy_env}}
            AWS_DEFAULT_REGION: {{aws_region}}
            VAGRANT_IP: {{vagrant_ip}}
            TF_VAR_system_dns_zone_name: {{system_dns_zone_name}}
            TF_VAR_bosh_az: {{bosh_az}}
            TF_VAR_bosh_fqdn: {{bosh_fqdn}}
            TF_VAR_bosh_fqdn_external: {{bosh_fqdn_external}}
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/vpc.tfvars.sh
                . terraform-variables/bosh-secrets.tfvars.sh

                touch paas-bootstrap/terraform/bosh/id_rsa.pub paas-bootstrap/terraform/bosh/bosh_id_rsa.pub
                terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
                terraform destroy ${terraform_params} -force -var env={{deploy_env}} -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                  -state=bosh-tfstate/bosh.tfstate -state-out=updated-bosh-tfstate/bosh.tfstate paas-bootstrap/terraform/bosh
        ensure:
          put: bosh-tfstate
          params:
            file: updated-bosh-tfstate/bosh.tfstate

  - name: destroy-vpc
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['destroy-bosh']
        - get: vpc-tfstate
        - get: pipeline-trigger
          trigger: true
          passed: ['destroy-bosh']

      - task: tf-destroy-vpc
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
          params:
              TF_VAR_env: {{deploy_env}}
              AWS_DEFAULT_REGION: {{aws_region}}
          inputs:
            - name: paas-bootstrap
            - name: vpc-tfstate
          outputs:
            - name: updated-vpc-tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              terraform destroy -force -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                -state=vpc-tfstate/vpc.tfstate -state-out=updated-vpc-tfstate/vpc.tfstate \
                paas-bootstrap/terraform/vpc
        ensure:
          put: vpc-tfstate
          params:
            file: updated-vpc-tfstate/vpc.tfstate

  - name: destroy-init-bucket
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['destroy-vpc']
        - get: bucket-terraform-state
        - get: pipeline-trigger
          trigger: true
          passed: ['destroy-vpc']

      - task: tf-destroy-init-bucket
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
          params:
              TF_VAR_env: {{deploy_env}}
              TF_VAR_state_bucket: {{state_bucket}}
              AWS_DEFAULT_REGION: {{aws_region}}
          inputs:
            - name: paas-bootstrap
            - name: bucket-terraform-state
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              terraform destroy -force -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                -state=bucket-terraform-state/bucket.tfstate paas-bootstrap/terraform/bucket

